name: Combined Workflow

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Deploy Infra-SQL-WebApp"]
    types:
      - completed

env:
  RESOURCE_GROUP: 'test-env'  # Set your target resource group name
  TEMPLATE_FILE: 'templates/azuredeploy.endpoint.json'  # Path to ARM template JSON file
  Deployment_Name: 'azuredeploy.endpoint'
  SQL_SCRIPT_PATH: '${{ github.workspace }}\sql\ProductsDb.sql'  # Path to SQL script here
  AZURE_WEBAPP_PACKAGE_PATH: ./publish
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 3.1.x
  WORKING_DIRECTORY: src
  #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # You might need this to trigger the second and third workflows

jobs:
  
  build-deploy-use-database:
    runs-on: windows-latest
    #needs: deploy-arm-template  # This job depends on the completion of the first job

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get SQL Server Name
        id: get-sql-server-name
        run: |
          $jsonOutput = az graph query -q "resources | where type == 'microsoft.sql/servers' | where resourceGroup == '$env:RESOURCE_GROUP' | project name" --output json
          $SQL_SERVER_NAME = ($jsonOutput | ConvertFrom-Json).data[0].name
          Write-Host "SQL_SERVER_NAME=$SQL_SERVER_NAME"
          echo "SQL_SERVER_NAME=$SQL_SERVER_NAME" >> $env:GITHUB_ENV

      - name: Get Database Name
        id: get-database-name
        run: |
          $jsonOutput = az graph query -q "resources | where type == 'microsoft.sql/servers/databases' | where resourceGroup == '$env:RESOURCE_GROUP' | project name" --output json
          $DATABASE_NAME = ($jsonOutput | ConvertFrom-Json).data[0].name
          Write-Host "DATABASE_NAME=$DATABASE_NAME"
          echo "DATABASE_NAME=$DATABASE_NAME" >> $env:GITHUB_ENV

      - name: Retrieve SQL Username and Password
        id: get-credentials
        run: |
          echo "SQL_USERNAME=${{ secrets.SQL_USERNAME }}" >> $env:GITHUB_ENV
          echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> $env:GITHUB_ENV

      - name: Get SQL Connection String
        id: get-connection-string
        run: |
          $CONNECTION_STRING = & az sql db show-connection-string --name "$env:DATABASE_NAME" --server "$env:SQL_SERVER_NAME" --client ado.net --output tsv
          Write-Host "CONNECTION_STRING=$CONNECTION_STRING"
          echo "CONNECTION_STRING=$CONNECTION_STRING" >> $env:GITHUB_ENV

      - name: Modify Connection String with Correct Values
        run: |
          $MODIFIED_CONNECTION_STRING = $env:CONNECTION_STRING -replace '<username>', $env:SQL_USERNAME -replace '<password>', $env:SQL_PASSWORD
          echo "CONNECTION_STRING=$MODIFIED_CONNECTION_STRING" >> $env:GITHUB_ENV
      - name: Display Current Working Directory
        run: |
          echo "Current Working Directory: $(pwd)"

      - name: Deploy SQL Database Schema
        uses: azure/sql-action@v2.2
        with:
          connection-string: ${{ env.CONNECTION_STRING }}
          path: ${{ env.SQL_SCRIPT_PATH }}

      - name: Azure Logout
        run: az logout

  build-and-deploy-webapp:
    runs-on: windows-latest
    needs: build-deploy-use-database  # This job depends on the completion of the second job

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore
        run: dotnet restore "${{ env.WORKING_DIRECTORY }}"

      - name: Build
        run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Test
        run: dotnet test "${{ env.WORKING_DIRECTORY }}" --no-build

      - name: Publish
        run: dotnet publish "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"

      - name: Get Azure Web App Name
        id: get-webapp-name
        run: |
          $jsonOutput = az graph query -q "resources | where type == 'microsoft.web/sites' | where resourceGroup == '$env:RESOURCE_GROUP' | project name" --output json
          $WEBAPP_NAME= ($jsonOutput | ConvertFrom-Json).data[0].name
          echo "WEBAPP_NAME=$WEBAPP_NAME" >> $env:GITHUB_ENV

      - name: Get Azure Web App Publish Profile
        id: get-webapp-publish-profile
        run: |
          $WEBAPP_PUBLISH_PROFILE = az webapp deployment list-publishing-profiles --name "$env:WEBAPP_NAME" --resource-group "$env:RESOURCE_GROUP" --xml
          echo "WEBAPP_PUBLISH_PROFILE=$WEBAPP_PUBLISH_PROFILE" >> $env:GITHUB_ENV

      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          publish-profile: ${{ env.WEBAPP_PUBLISH_PROFILE }}

      - name: Publish Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: webapp
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Azure Logout
        run: az logout
